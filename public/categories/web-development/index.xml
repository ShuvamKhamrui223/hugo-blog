<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Development on My New Hugo Site</title>
    <link>https://shuvamkhamrui223.github.io/hugo-blog/categories/web-development/</link>
    <description>Recent content in Web Development on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://shuvamkhamrui223.github.io/hugo-blog/categories/web-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>current page link styling in react js with tailwind css</title>
      <link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/data/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/data/</guid>
      <description>&lt;h2 id=&#34;current-page-link-styling&#34;&gt;current page link styling&lt;/h2&gt;&#xA;&lt;p&gt;You can style the current page NavLink differently in a React application using React Router and Tailwind CSS by utilizing the isActive property provided by the NavLink component. Here&amp;rsquo;s how to do it:&lt;/p&gt;&#xA;&lt;p&gt;Steps to Style Current Page NavLink&lt;/p&gt;&#xA;&lt;p&gt;• Use NavLink Component: React Router&amp;rsquo;s NavLink provides an isActive boolean property that indicates whether the link corresponds to the current route.&lt;/p&gt;&#xA;&lt;p&gt;• Apply Tailwind Classes Dynamically: Use a function to apply conditional Tailwind classes based on the isActive property.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Incorporating Gemini AI into your manga reading website</title>
      <link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/integrate-gemini-to-website/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/integrate-gemini-to-website/</guid>
      <description>&lt;h2 id=&#34;incorporating-gemini-ai-into-your-manga-reading-website&#34;&gt;Incorporating Gemini AI into your manga reading website&lt;/h2&gt;&#xA;&lt;p&gt;Incorporating Gemini AI into your manga reading website can significantly enhance user experience by providing personalized recommendations, advanced search features, and interactive elements. Here&amp;rsquo;s how you can integrate Gemini AI to make your site more engaging:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-personalized-manga-recommendations&#34;&gt;&lt;strong&gt;1. Personalized Manga Recommendations&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Leverage Gemini AI to analyze user preferences, reading history, and ratings to recommend manga tailored to their interests.&lt;/p&gt;&#xA;&lt;h4 id=&#34;implementation&#34;&gt;Implementation&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Collection&lt;/strong&gt;: Track user reading habits (e.g., genres, authors, completed series).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Recommendation Engine&lt;/strong&gt;: Use Gemini AI to process this data and generate personalized recommendations.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;UI Integration&lt;/strong&gt;: Add a &amp;ldquo;Recommended for You&amp;rdquo; section on the homepage or profile page.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;&amp;ldquo;Because you liked [Naruto], you might enjoy [Bleach].&amp;rdquo;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-ai-powered-manga-search&#34;&gt;&lt;strong&gt;2. AI-Powered Manga Search&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Use Gemini AI for natural language processing (NLP) to enable users to search for manga intuitively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>React middleware authentication</title>
      <link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/react-middleware/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/react-middleware/</guid>
      <description>&lt;h2 id=&#34;react-middleware-authentication&#34;&gt;React middleware authentication&lt;/h2&gt;&#xA;&lt;p&gt;To implement a middleware-like system in React.js, you can achieve this by using React Router and a combination of higher-order components (HOCs) or wrapper components for layouts. Here’s how you can structure it:&lt;/p&gt;&#xA;&lt;h2 id=&#34;steps-to-implement&#34;&gt;Steps to Implement&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Install Dependencies&lt;/strong&gt;: Ensure you have &lt;code&gt;react-router-dom&lt;/code&gt; installed.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install react-router-dom&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Create Two Layout Components&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;AuthLayout&lt;/strong&gt;: For authentication pages like Sign In and Register.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;AppLayout&lt;/strong&gt;: For the main application with a header, footer, and other components.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Set Up Routes&lt;/strong&gt;:&#xA;Use &lt;code&gt;react-router-dom&lt;/code&gt; to define routes and implement a custom &lt;code&gt;ProtectedRoute&lt;/code&gt; component to handle authentication checks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Search form with React router</title>
      <link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/react-router-search-form/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/react-router-search-form/</guid>
      <description>&lt;h2 id=&#34;search-form-with-react-router&#34;&gt;Search form with React router&lt;/h2&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s an example of a search form using React Router v6&amp;rsquo;s &lt;code&gt;useNavigate&lt;/code&gt; hook for redirection upon form submission:&lt;/p&gt;&#xA;&lt;h3 id=&#34;steps&#34;&gt;Steps&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Install React Router&lt;/strong&gt;: If you haven&amp;rsquo;t already installed React Router, use the following command to add it to your project:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install react-router-dom&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Create a Search Form Component&lt;/strong&gt;: This component uses the &lt;code&gt;useNavigate&lt;/code&gt; hook to programmatically navigate to the &lt;code&gt;/search?q=searchterm&lt;/code&gt; route when the form is submitted.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Retrieve array from firebase</title>
      <link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/retrieve-array-from-firebase/</link>
      <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/retrieve-array-from-firebase/</guid>
      <description>&lt;h2 id=&#34;retrieve-array-from-firebase&#34;&gt;Retrieve array from firebase&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. Project Setup&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Ensure Firestore is Set Up:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create a Firebase project in the Firebase console.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Enable Firestore in your project.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Install the necessary Firebase packages:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install firebase &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Create a Firebase Configuration File:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create a file named &lt;code&gt;firebase.js&lt;/code&gt; (or similar) in your React project.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Import the &lt;code&gt;initializeApp&lt;/code&gt; function from &lt;code&gt;firebase&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Add your Firebase project&amp;rsquo;s configuration details:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;initializeApp&lt;/span&gt; } &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;firebase/app&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firebaseConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;authDomain&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_PROJECT_ID.firebaseapp.com&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;projectId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_PROJECT_ID&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;storageBucket&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_PROJECT_ID.appspot.com&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;messagingSenderId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_MESSAGING_SENDER_ID&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;appId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_APP_ID&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;measurementId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_MEASUREMENT_ID&amp;#34;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initializeApp&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;firebaseConfig&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. Retrieve Data from Firestore&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
