<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Development on My New Hugo Site</title><link>https://shuvamkhamrui223.github.io/hugo-blog/categories/web-development/</link><description>Recent content in Web Development on My New Hugo Site</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 20 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://shuvamkhamrui223.github.io/hugo-blog/categories/web-development/index.xml" rel="self" type="application/rss+xml"/><item><title>current page link styling in react js with tailwind css</title><link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/data/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/data/</guid><description>&lt;h2 id="current-page-link-styling">current page link styling&lt;/h2>
&lt;p>You can style the current page NavLink differently in a React application using React Router and Tailwind CSS by utilizing the isActive property provided by the NavLink component. Here&amp;rsquo;s how to do it:&lt;/p>
&lt;p>Steps to Style Current Page NavLink&lt;/p>
&lt;p>• Use NavLink Component: React Router&amp;rsquo;s NavLink provides an isActive boolean property that indicates whether the link corresponds to the current route.&lt;/p>
&lt;p>• Apply Tailwind Classes Dynamically: Use a function to apply conditional Tailwind classes based on the isActive property.&lt;/p></description></item><item><title>Incorporating Gemini AI into your manga reading website</title><link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/integrate-gemini-to-website/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/integrate-gemini-to-website/</guid><description>&lt;h2 id="incorporating-gemini-ai-into-your-manga-reading-website">Incorporating Gemini AI into your manga reading website&lt;/h2>
&lt;p>Incorporating Gemini AI into your manga reading website can significantly enhance user experience by providing personalized recommendations, advanced search features, and interactive elements. Here&amp;rsquo;s how you can integrate Gemini AI to make your site more engaging:&lt;/p>
&lt;hr>
&lt;h3 id="1-personalized-manga-recommendations">&lt;strong>1. Personalized Manga Recommendations&lt;/strong>&lt;/h3>
&lt;p>Leverage Gemini AI to analyze user preferences, reading history, and ratings to recommend manga tailored to their interests.&lt;/p>
&lt;h4 id="implementation">Implementation&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Data Collection&lt;/strong>: Track user reading habits (e.g., genres, authors, completed series).&lt;/li>
&lt;li>&lt;strong>Recommendation Engine&lt;/strong>: Use Gemini AI to process this data and generate personalized recommendations.&lt;/li>
&lt;li>&lt;strong>UI Integration&lt;/strong>: Add a &amp;ldquo;Recommended for You&amp;rdquo; section on the homepage or profile page.&lt;/li>
&lt;/ul>
&lt;h4 id="example">Example&lt;/h4>
&lt;ul>
&lt;li>&lt;em>&amp;ldquo;Because you liked [Naruto], you might enjoy [Bleach].&amp;rdquo;&lt;/em>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-ai-powered-manga-search">&lt;strong>2. AI-Powered Manga Search&lt;/strong>&lt;/h3>
&lt;p>Use Gemini AI for natural language processing (NLP) to enable users to search for manga intuitively.&lt;/p></description></item><item><title>React middleware authentication</title><link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/react-middleware/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/react-middleware/</guid><description>&lt;h2 id="react-middleware-authentication">React middleware authentication&lt;/h2>
&lt;p>To implement a middleware-like system in React.js, you can achieve this by using React Router and a combination of higher-order components (HOCs) or wrapper components for layouts. Here’s how you can structure it:&lt;/p>
&lt;h2 id="steps-to-implement">Steps to Implement&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Install Dependencies&lt;/strong>: Ensure you have &lt;code>react-router-dom&lt;/code> installed.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install react-router-dom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create Two Layout Components&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AuthLayout&lt;/strong>: For authentication pages like Sign In and Register.&lt;/li>
&lt;li>&lt;strong>AppLayout&lt;/strong>: For the main application with a header, footer, and other components.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Set Up Routes&lt;/strong>:
Use &lt;code>react-router-dom&lt;/code> to define routes and implement a custom &lt;code>ProtectedRoute&lt;/code> component to handle authentication checks.&lt;/p></description></item><item><title>Search form with React router</title><link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/react-router-search-form/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/react-router-search-form/</guid><description>&lt;h2 id="search-form-with-react-router">Search form with React router&lt;/h2>
&lt;p>Here&amp;rsquo;s an example of a search form using React Router v6&amp;rsquo;s &lt;code>useNavigate&lt;/code> hook for redirection upon form submission:&lt;/p>
&lt;h3 id="steps">Steps&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Install React Router&lt;/strong>: If you haven&amp;rsquo;t already installed React Router, use the following command to add it to your project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install react-router-dom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a Search Form Component&lt;/strong>: This component uses the &lt;code>useNavigate&lt;/code> hook to programmatically navigate to the &lt;code>/search?q=searchterm&lt;/code> route when the form is submitted.&lt;/p></description></item><item><title>Retrieve array from firebase</title><link>https://shuvamkhamrui223.github.io/hugo-blog/webdev/retrieve-array-from-firebase/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://shuvamkhamrui223.github.io/hugo-blog/webdev/retrieve-array-from-firebase/</guid><description>&lt;h2 id="retrieve-array-from-firebase">Retrieve array from firebase&lt;/h2>
&lt;p>&lt;strong>1. Project Setup&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Ensure Firestore is Set Up:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create a Firebase project in the Firebase console.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enable Firestore in your project.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install the necessary Firebase packages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install firebase 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a Firebase Configuration File:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create a file named &lt;code>firebase.js&lt;/code> (or similar) in your React project.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Import the &lt;code>initializeApp&lt;/code> function from &lt;code>firebase&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add your Firebase project&amp;rsquo;s configuration details:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">initializeApp&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;firebase/app&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">firebaseConfig&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">apiKey&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">authDomain&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_PROJECT_ID.firebaseapp.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">projectId&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_PROJECT_ID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">storageBucket&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_PROJECT_ID.appspot.com&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">messagingSenderId&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_MESSAGING_SENDER_ID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">appId&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_APP_ID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">measurementId&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YOUR_MEASUREMENT_ID&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">initializeApp&lt;/span>(&lt;span style="color:#a6e22e">firebaseConfig&lt;/span>); 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. Retrieve Data from Firestore&lt;/strong>&lt;/p></description></item></channel></rss>